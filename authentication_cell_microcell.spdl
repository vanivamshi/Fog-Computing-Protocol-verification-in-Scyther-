usertype AuthenticationRequest;
usertype RequestApproved;
usertype Message;
usertype UniqueID;
hashfunction h;
usertype TimeStamp;
usertype SessionKey;
secret fSec,SeedSecret;
macro R=fSec(SeedSecret);
# C,A,B are device addresses

protocol Block(A,B,C)
{
    role A
    {
        fresh na: Nonce;
        var nb,nc: Nonce;
        fresh Ta: TimeStamp;
        var Tb,Tc: TimeStamp;
	fresh UID: UniqueID;
	var RApp: RequestApproved;
	fresh AReq: AuthenticationRequest;
	fresh message: Message;
	var kAB: SessionKey;

	macro R=fSec(SeedSecret);
	#macro H = h(na,Ta,R);
        send_1(A,B, {{A,AReq,UID,na,Ta,h(na,Ta),h(na,Ta,R)}sk(A)} pk(B) );
	claim(A,Running,B,na);
        recv_4(B,A, {{RApp,nb,Tb,h(nb,Tb),{kAB}k(B,A)}sk(B)}pk(A) );
	send_5(A,B, {message}kAB );
	
        claim(A,Secret,na);
        claim(A,Secret,kAB);
	claim(A,Alive);
        #claim(A,Weakagree);
        claim(A,Commit,B,kAB);
        #claim(A,Commit,C,nc);
        claim(A,Niagree);
	claim(A,Nisynch);
    }    
    
    role B
    {
        fresh nb: Nonce;
        var na,nc: Nonce;
        fresh Tb: TimeStamp;
        var Tc,Ta: TimeStamp;
	var AReq: AuthenticationRequest;
	fresh RApp: RequestApproved;
	fresh kAB: SessionKey;
	var UID: UniqueID;
	var message: Message;

        recv_1(A,B, {{A,AReq,UID,na,Ta,h(na,Ta),h(na,Ta,R)}sk(A)} pk(B) );
	claim(B,Running,A,nb,na);
        send_2(B,C, {{UID,nb,Tb,h(nb,Tb),h(na,Ta,R)}sk(B)}pk(C) );
	macro Ri = fSec(SeedSecret);
	recv_3(C,B, {UID,nc,Tc,h(nc,Tc),{Ri}sk(C)}pk(B) );
	macro Hi = h(na,Ta,Ri);
	match(h(na,Ta,R),Hi);
	send_4(B,A, {{RApp,nb,Tb,h(nb,Tb),{kAB}k(B,A)}sk(B)}pk(A) );
	recv_5(A,B, {message}kAB );

	claim(B,Running,C,nb);
        claim(B,Secret,nb);
        claim(B,Secret,kAB);
	#claim(B,Alive);
        #claim(B,Weakagree);
        #claim(B,Commit,C,nc);
        #claim(B,Commit,A,na);
        claim(B,Niagree);
	claim(B,Nisynch);
    }

    role C
    {
        var na,nb: Nonce;
	fresh nc: Nonce;
        fresh Tc: TimeStamp;
        var Ta,Tb: TimeStamp;
	fresh RApp: RequestApproved;
        #fresh fSec,SeedSecret: EncryptionSecret;
	fresh UID: UniqueID;

	recv_2(B,C, {{UID,nb,Tb,h(nb,Tb),h(na,Ta,R)}sk(B)}pk(C) );
	macro Ri = fSec(SeedSecret);
        send_3(C,B, {UID,nc,Tc,h(nc,Tc),{Ri}sk(C)}pk(B) );
	
        claim(C,Secret,nc);
	claim(C,Alive);
        #claim(C,Weakagree);
        #claim(C,Commit,A,na);
        #claim(C,Commit,B,nb);
        claim(C,Niagree);
	claim(C,Nisynch);
    }
}
