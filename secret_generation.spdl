usertype AuthenticationRequest;
usertype RequestApproved;
usertype Message;
usertype OldUniqueID;
hashfunction h;
usertype TimeStamp;
usertype SessionKey;
usertype EncryptionSecret;
# C,A,B are device addresses

protocol Block(A,B,C)
{
    role C
    {
        var na,nb: Nonce;
	fresh nc: Nonce;
        fresh Tc: TimeStamp;
        var Ta,Tb: TimeStamp;
	var RApp: RequestApproved;
	fresh AReq: AuthenticationRequest;
	fresh OID: OldUniqueID;
	fresh kCB: SessionKey;
	var fSec: EncryptionSecret;

	send_1(C,A, {{C,AReq,OID,nc,Tc,h(nc,Tc)}sk(C)} pk(A) );
	claim(C,Running,A,nc);
	recv_2(A,C, {{na,Ta,h(na,nc),h(na,Ta)}sk(A)}pk(C) );
	send_4(C,B, {{C,AReq,OID,nc,Tc,h(nc,Tc),{kCB}k(C,B)}sk(C)} pk(B) );
	recv_5(B,C, {RApp,fSec,{fSec}sk(B)}kCB );

        claim(C,Secret,nc);
	claim(C,Alive);
        #claim(C,Weakagree);
        #claim(C,Commit,A,na);
        #claim(C,Commit,B,nb);
        claim(C,Niagree);
	claim(C,Nisynch);
    }

    role A
    {
        fresh na: Nonce;
        var nb,nc: Nonce;
        fresh Ta: TimeStamp;
        var Tb,Tc: TimeStamp;
	var OID: OldUniqueID;
	var RApp: RequestApproved;
	var AReq: AuthenticationRequest;
	var fSec: EncryptionSecret;
	
	recv_1(C,A, {{C,AReq,OID,nc,Tc,h(nc,Tc)}sk(C)} pk(A) );
	send_2(A,C, {{na,Ta,h(na,nc),h(na,Ta)}sk(A)}pk(C) );
	claim(A,Running,B,na);
	send_3(A,B, {{AReq,na,Ta,h(na,Ta)}sk(A)}pk(B) );
	
        claim(A,Secret,na);
        claim(A,Alive);
        #claim(A,Weakagree);
        claim(A,Commit,C,nc);
        claim(A,Niagree);
	claim(A,Nisynch);
    }    
    
    role B
    {
        fresh nb: Nonce;
        var na,nc: Nonce;
        fresh Tb: TimeStamp;
        var Tc,Ta: TimeStamp;
	var AReq: AuthenticationRequest;
	fresh RApp: RequestApproved;
	var OID: OldUniqueID;
	fresh fSec: EncryptionSecret;
	var kCB: SessionKey;

        recv_3(A,B, {{AReq,na,Ta,h(na,Ta)}sk(A)}pk(B) );
	recv_4(C,B, {{C,AReq,OID,nc,Tc,h(nc,Tc),{kCB}k(C,B)}sk(C)} pk(B) );
	send_5(B,C, {RApp,fSec,{fSec}sk(B)}kCB );

	claim(B,Running,C,nb);
        claim(B,Secret,nb);
        claim(B,Secret,fSec);
	claim(B,Alive);
        #claim(B,Weakagree);
        #claim(B,Commit,C,nc);
        #claim(B,Commit,A,na);
        claim(B,Niagree);
	claim(B,Nisynch);
    }
}
