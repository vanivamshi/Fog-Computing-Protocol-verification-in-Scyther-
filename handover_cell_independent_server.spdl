usertype  NonceRequest;
usertype RequestApproved;
usertype Reputation;
usertype UniqueID;
usertype EncryptionSecret;
usertype OldID;
hashfunction h;
usertype TimeStamp;
secret fValue, SeedValue,RanNum;     # RanNum = random number
macro Value = fValue(SeedValue);
macro Value1 = fValue(SeedValue);
usertype SessionKey;

protocol Block(A,B,C,D)
{
    role A
    {
        fresh na: Nonce;
        var nb,nd: Nonce;
        fresh Ta: TimeStamp;
        var Tb,Td: TimeStamp;
	fresh NReq: NonceRequest;
	fresh OID: OldID;
	var UID: UniqueID;
	fresh Rep: Reputation;
	var kAD: SessionKey;
	var RApp: RequestApproved;

        send_1(A,B, {{NReq,OID,Rep,na,Ta,h(na,Ta),D}sk(A)}pk(B) );
	recv_2(B,A, {{RanNum,nb,Tb,h(nb,Tb)}sk(B)}pk(A));
	recv_5(D,A, {{nd,Td,h(nd,Td),SeedValue,{kAD}k(A,D)}sk(D)}pk(A) );
	send_6(A,D, {A,na,Ta,h(na,Ta),h(Value1)}kAD );
	recv_9(D,A, {{RApp,UID,Td,nd,h(nd,Td)}sk(D)}pk(A) );

	claim(A,Running,B,na);
        claim(A,Secret,na);
	claim(A,Alive);
        claim(A,Weakagree);
        #claim(A,Commit,C,nc,na);
        #claim(A,Commit,B,na);
        claim(A,Niagree);
	claim(A,Nisynch);
    }

    role B
    {
        var na,nc: Nonce;
	fresh nb: Nonce;
        fresh Tb: TimeStamp;
        var Ta,Tc: TimeStamp;
	var OID: OldID;
	var Rep: Reputation;
	fresh RApp: RequestApproved;
	fresh UID: UniqueID;
	var NReq: NonceRequest;

	macro H = h(RanNum,Rep);
	recv_1(A,B, {{NReq,OID,Rep,na,Ta,h(na,Ta),D}sk(A)}pk(B) );
	send_2(B,A, {{RanNum,nb,Tb,h(nb,Tb)}sk(B)}pk(A));
	send_3(B,C, {{NReq,OID,RanNum,H,nb,Tb,h(nb,Tb)}sk(B)}pk(C));

        claim(B,Secret,nb);
	claim(B,Alive);
        claim(B,Weakagree);
        #claim(B,Commit,A,na);
        #claim(B,Commit,C,na,nb);
        claim(B,Niagree);
	claim(B,Nisynch);
    }

    role C
    {
        fresh nc: Nonce;
        var nb,nd: Nonce;
        fresh Tc: TimeStamp;
        var Tb,Td: TimeStamp;
	fresh UID: UniqueID;
	fresh RApp: RequestApproved;
	var OID: OldID;
	var Rep: Reputation;
	var NReq: NonceRequest;

        recv_3(B,C, {{NReq,OID,RanNum,H,nb,Tb,h(nb,Tb)}sk(B)}pk(C));
	send_4(C,D, {{NReq,OID,Tc,nc,h(nc,Tc),SeedValue,h(Value)}sk(C)}pk(D) );
	claim(C,Running,D,nb);
	recv_7(D,C, {{Tc,nc,h(nc,Tc),OID,RanNum}sk(D)}pk(C) );
	macro H1 = h(RanNum,Rep);
	match(H,H1);
	send_8(C,D, {{RApp,UID,Tc,nc,h(nc,Tc)}sk(C)}pk(D) );

        claim(C,Secret,nc);
	claim(C,Alive);
        claim(C,Weakagree);
        #claim(C,Commit,A,na,nc);
        #claim(C,Commit,B,nb,nc);
        claim(C,Niagree);
	claim(C,Nisynch);
    }    

    role D
    {
        var na,nc: Nonce;
	fresh nd: Nonce;
        fresh Td: TimeStamp;
        var Ta,Tc: TimeStamp;
	var Rep: Reputation;
	var RApp: RequestApproved;
	fresh UID: UniqueID;
	fresh kAD: SessionKey;
	var OID: OldID;
	var NReq: NonceRequest;

	recv_4(C,D, {{NReq,OID,Tc,nc,h(nc,Tc),SeedValue,h(Value)}sk(C)}pk(D) );
	claim(D,Running,C,nc);
	send_5(D,A, {{nd,Td,h(nd,Td),SeedValue,{kAD}k(A,D)}sk(D)}pk(A) );
	recv_6(A,D, {A,na,Ta,h(na,Ta),h(Value1)}kAD );
	match(h(Value),h(Value1));
	send_7(D,C, {{Tc,nc,h(nc,Tc),OID,RanNum}sk(D)}pk(C) );
	recv_8(C,D, {{RApp,UID,Tc,nc,h(nc,Tc)}sk(C)}pk(D) );
	send_9(D,A, {{RApp,UID,Td,nd,h(nd,Td)}sk(D)}pk(A) );

        claim(D,Secret,nd);
	claim(D,Secret,kAD);
	claim(D,Alive);
        claim(D,Weakagree);
        #claim(D,Commit,C,nc,nd);
        claim(D,Niagree);
	claim(D,Nisynch);
    }
}
